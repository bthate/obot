#!/usr/bin/python3

__version__ = 1

import os, sys ; sys.path.insert(0, os.getcwd())

import logging
import shutil
import time
import unittest

import ob

from ob.cls import get_cls
from ob.evt import waiting
from ob.log import level
from ob.shl import execute, parse_cli
from ob.tms import elapsed
from ob.utl import cdir

from ob import k

opts = [
    ('-b', '', 'store_true', False, 'daemon', 'enable daemon mode.'),
    ('-d', '', 'string', "", 'workdir', 'set working directory.'),
    ('-k', '', 'store_true', False, 'kernel', 'use saved kernel config'),
    ('-l', '', 'string', '', 'level', 'loglevel.'),
    ('-m', '', 'string', '', 'modules', 'modules to load.'),
    ('-n', '', 'string', 'obot', 'name', "program name."),
    ('-o', '', "string", "", 'options', "options to use."),
    ('-p', '', 'store_false', True, 'prompting', 'disable prompting for initial values.'),
    ('-r', '', 'store_true', False, 'resume', 'resume the bot.'),
    ('-s', '', 'store_true', False, 'dosave', 'save configuration files.'),
    ('-t', '', 'store_true', False, 'threading', 'enabled threading.'),
    ('-v', '', 'store_true', False, 'verbose', 'enable verbose mode.'),
    ('-x', '', 'string', '', 'exclude', 'skip modules'),
    ('-z', '', 'store_true', False, 'noshell', 'disable shell.'),
    ('', '--autoload', 'store_true', False, 'autoload', 'use on demand module loading.'),
    ('', '--bork', 'store_true', False, 'bork', 'bork on exception.'),
    ('', '--cached', 'store_true', False, 'cached', 'use caching'),
    ('', '--debug', "string", "", 'debug', "enable debug mode"),
    ('', '--logdir', "string", "", 'logdir', "directory to log to."),
    ('', '--owner', "string", "", 'owner', "owner's userhost or JID."),
    ('', '--nousers', 'store_true', False, 'nousers', 'disabled users.'),
]

def initialize():
    cdir("testdata")
    k.users.oper("test@shell")
    k.cfg.prompt = False
    k.walk("ob")
    k.walk("obot")
    k.walk("obot.cmd")
    k.start()
    for c in ob.k.classes:
        try:
            o = get_cls(c)()
            o.txt = "yo!"
            o.save()
        except TypeError as ex:
            pass

def main():
    try:
        shutil.rmtree("testdata")
    except:
        pass
    parse_cli(wd="testdata", opts=opts)
    ob.workdir = "testdata"
    level("debug")
    initialize()
    if k.cfg.threading:
       k._threaded = True
    k.cfg.exclude = "mdl,rss"
    k.cfg.debug = True
    level(k.cfg.level)
    test_path = os.getcwd() + os.sep + "tests"
    p = ""
    if k.cfg.args:
        p = "test_%s*" % k.cfg.args[0]
    if not p:
        p = "test_*"
    suite = unittest.loader.TestLoader().discover(test_path, pattern=p)
    unittest.TextTestRunner(verbosity=3).run(suite)
   
execute(main)
for e in waiting:
    print(e)
print(elapsed(time.time() - ob.k.state.starttime))
os._exit(0)
